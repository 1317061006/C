命令模式 将一个请求封装成一个对象 从而让你使用不同的请求把客户端参数化
对请求排队或者记录请求日志 可以提供命令的撤销和恢复功能

Receive接受者角色
该角色就是干活的角色 命令传递到这里被执行

Command命令角色
需要执行的所有命令都在这里声明

Invoker调用者角色
接到命令 然后执行命令

命令模式是比较简单 但是在项目中非常频繁的使用 因为它的封装性特别好 把请求方法和执行方法分开了 扩展性也有很大
的保障 通用代码比较简单

命令模式的优点
1 类间解耦
调用者角色与接收者角色之间没有任何的依赖关系 调用者实行功能时只需要调用Command抽象的execute方法就可以  不需要
了解是哪个接受者执行

2 可扩展性
Command的子类可以非常容易扩展 而调用者Invoker和高层次的模块Client不产生严重的代码耦合

3 命令模式与其他模式结合会更优秀
命令模式可以结合责任链模式实现命令族解析任务 结合模板方法模式 则可以减少command子类的膨胀问题

命令模式的缺点
就是如果N个命令的话 command的子类就会非常的多 类膨胀非常的大

命令模式的使用场景
只要是你认为是命令的地方就可以使用命令模式

反悔问题
有俩种办法 一是结合备忘录模式还原到最后状态 该方法适合接受者为状态的变更情况 而不适合用事件处理 二是通过
增加一个新的命令 实现实际的回滚