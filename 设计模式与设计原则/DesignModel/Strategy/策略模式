策略模式是一个比较简单的模式 也叫政策模式
定义一个算法 将每个算法封装起来 并且使他们之间可以转换

Context封装角色
它也叫上下文角色 起承上启下的作用 屏蔽高层模块对外策略 算法的直接访问 封装可能存在的变化

Strategy抽象策略角色
策略算法家族的抽象 通常为借口 定义每个策略或算法

ConcreteStrategy具体策略角色
实现抽象策略中的操作 该类含有具体的算法

策略模式的重点是封装角色  它是借用了代理模式的思路
差别就是策略模式的封装角色与被封装的策略类不是同一个接口 如果是同一个接口就成了代理模式

策略模式的优点
算法是可以自由切换
避免使用多重条件判断
扩展性良好

策略模式的缺点
多个类只有在算法或行为上稍有不同的场景
算法需要自由切换场景
需要屏蔽算法规则的场景


策略模式的注意事项
如果一个策略家族数量超过4个 则需要考虑使用混合模式
解决策略模式膨胀和对外暴露的问题  否则以后的项目就会变的特别麻烦

策略枚举方式也是非常不错的模式 但是受枚举类型的限制 每个枚举项都是public final static 的 扩展性有一定的约束
因此在系统开发中  不适合经常变化的角色


策略模式拥有致命缺陷的地方就是所有的策略类都需要暴露出去  这样才方便客户端决定使用哪个策略 在实际项目中
我们一般使用工厂方法模式来实现策略类的声明