要求一个子系统与其内部的通信必须通过一个统一的对象进行  门面模式提供一个高层次的结果 使得子系统更易于使用

门面模式注意使用 统一的对象 也就是提供一个访问子系统的接口 除了这个接口不允许有任何子系统的行为发生
门面对象是外界访问子系统内部的唯一通道 不管子系统内部是多么的杂乱 只要有门面对象在 就可以做到 金玉其外败絮其中

Facade门面角色
此角色知晓子系统的所有功能和责任 一般情况下 本角色将会所有从客户端发的请求委托委派到相应的子系统去 也就是说
该角色没有实际的业务逻辑 只是一个委托类

subSystem子系统角色
可以同时有一个或者多个子系统 每一个子系统都不是一个单独的类 而是一个类的集合 子系统不知道门面的存在 对于子系统
而言 门面只是另外一个客户端而言

门面模式的优点
减少了系统的相互依赖
如果不使用门面模式的话 外界访问直接深入到子系统内部 相互之间是一种耦合关系
提高了灵活性
依赖减少了 灵活性自然就提高了
提高了安全性

门面模式的缺点
最大的缺点就是不符合开闭原则 对修改关闭 对扩展开发 所以说设计的时候需要慎之又慎 多思考几遍才有收获

门面模式的使用场景
为一个复杂的模块或子系统提供一个供外界访问的接口
子系统相对独立 外键对子系统的访问只要是黑箱操作即可
预防低水平人员带来的风险扩散

门面模式的注意事项
一个系统可以有多个门面
门面已经庞大到不能忍受的程度
子系统可以提供不同的访问路径

门面模式不参与到子系统内的业务逻辑
我们可以建立封装类 门面对象然后就不参与业务逻辑了

对于一个大项目 为了避免人员带来的危险 也可以使用门面模式 尽量让其他项目成员不用看到这些人的代码